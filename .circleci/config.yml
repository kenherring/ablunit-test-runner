version: 2.1

orbs:
  shellcheck: circleci/shellcheck@3.2.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

parameters:
  vscode-version:
    type: string
    default: 1.84.2

oe-version-param: &oe-version-param
  parameters:
    oe-version:
      type: string
      enum: [ '12.2.12', '12.7.0' ]
      default: '12.2.12'
setup: &setup
  when:
    condition: true
    steps:
      - run: tr ' ' '\n' \<<< "$PROGRESS_CFG_BASE64" | base64 --decode > /psc/dlc/progress.cfg
      - checkout
      - restore_cache:
          keys:
            - v2-cache-<< parameters.oe-version >>-{{ checksum "package.json" }}
            - v2-cache-<< parameters.oe-version >>
context-and-filters: &context-and-filters
  context:
    - DockerHub
    - PROGRESS_CFG
    - SonarCloud
    - Azure_PAT
  filters:
    tags: ## all tags starting with 'v' (all branches also included by default)
      only:
        - /^v.*/
store-artifacts: &store-artifacts
  - store_artifacts:
      when: always
      path: artifacts
store-results: &store-results
  - store_test_results:
      when: always
      path: artifacts

executors:
  psc-primary:
    docker:
      - image: kherring/ablunit-test-runner:12.2.12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN

workflows:
  build:
    jobs:
      - shellcheck/check
      - test-and-scan:
          <<: *context-and-filters
          matrix:
            parameters:
              oe-version: [ 12.2.12, 12.7.0 ]
          name: test-and-scan_<< matrix.oe-version >>
      - test-with-bundle:
          <<: *context-and-filters
      - install-and-run:
          <<: *context-and-filters
      - package-and-publish:
          requires:
            - shellcheck/check
            - test-and-scan_12.2.12
            - test-and-scan_12.7.0
            - test-with-bundle
            - install-and-run
          <<: *context-and-filters

jobs:
  test-and-scan:
    <<: *oe-version-param
    docker:
      - image: kherring/ablunit-test-runner:<< parameters.oe-version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - <<: *setup
      - run: .circleci/run_test_wrapper.sh
      - <<: *store-results
      - <<: *store-artifacts
      - when:
          condition:
            equal: [ << parameters.oe-version >>, '12.2.12' ]
          steps:
            - sonarcloud/scan
      - run: .circleci/validate.sh
      - save_cache:
          key: v2-cache-<< parameters.oe-version >>-{{ checksum "package.json" }}
          paths:
            - cache
  test-with-bundle:
    <<: *oe-version-param
    executor: psc-primary
    steps:
      - <<: *setup
      - run: .circleci/run_test_wrapper.sh bundle
      - <<: *store-results
  install-and-run:
    <<: *oe-version-param
    executor: psc-primary
    steps:
      - <<: *setup
      - run: npm install
      - run: npm run test:setup
      - run: vsce package --pre-release --githubBranch "$CIRCLE_BRANCH"
      - run: vsce ls
      - run:
          name: install and run
          command: |
            cd dummy-ext
            npm run compile
            export DONT_PROMPT_WSL_INSTALL=No_Prompt_please
            xvfb-run -a npm run test:install-and-run
      - <<: *store-results
      - <<: *store-artifacts
  package-and-publish:
    docker:
      - image: cimg/node:20.8
    steps:
      - checkout
      - run: npm install
      - run: sudo npm install -g @vscode/vsce
      - run: '[ -n "<< pipeline.git.tag >>" ] || scripts/update_version.sh --pre-release'
      - run: vsce package --pre-release --githubBranch "$CIRCLE_BRANCH"
      - when:
          condition: << pipeline.git.tag >>
          steps:
          - run:
              name: validate version matches tag
              command: |
                if [ "$(jq -r .version package.json)" != "${CIRCLE_TAG#v}" ]; then
                  echo "Version in package.json does not match tag"
                  exit 1
                fi
          - run: vsce publish --pre-release --githubBranch "$CIRCLE_BRANCH" --packagePath ablunit-test-runner-${CIRCLE_TAG#v}.vsix
      - run: mkdir -p artifacts && cp ablunit-test-runner-*.vsix artifacts
      - <<: *store-artifacts
