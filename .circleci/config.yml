version: 2.1

orbs:
  shellcheck: circleci/shellcheck@3.2.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

parameters:
  cache-version:
    type: string
    default: v9
  expected-vsix-count:
    type: integer
    default: 1
  primary-oe-version:
    type: string
    default: 12.8.1

oe-version-param: &oe-version-param
  parameters:
    oe-version:
      type: string
      enum: [ '12.2.12', '12.7.0', '12.8.1', '12.8.3' ]
      default: '12.8.1'
    vscode-version:
      type: string
      default: stable
      enum: [ stable, proposedapi, insiders ]
context-and-filters: &context-and-filters
  context:
    - DockerHub
    - PROGRESS_CFG
    - SonarCloud
  filters:
    tags: ## all tags
      only: [ /^.*$/ ]

executors:
  psc-primary:
    docker:
      - image: kherring/ablunit-test-runner:12.8.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN

commands:
  restore-package-cache:
    steps:
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-version >>-package-cache-{{ checksum "package.json" }}
            - << pipeline.parameters.cache-version >>-package-cache-
  save-package-cache:
    steps:
      - save_cache:
          key: << pipeline.parameters.cache-version >>-package-cache-{{ checksum "package.json" }}
          paths: [ /home/circleci/cache/node_modules_cache ]
  restore-test-cache:
    parameters:
      oe-version:
        type: string
        default: none
    steps:
      - when:
          condition: true
          steps:
            - run: tr ' ' '\n' \<<< "$PROGRESS_CFG_BASE64" | base64 --decode > /psc/dlc/progress.cfg
            # - restore_cache:
            #     keys:
            #       - << pipeline.parameters.cache-version >>-test-cache-<< parameters.oe-version >>-{{ checksum "package.json" }}
  save-test-cache:
    parameters:
      oe-version:
        type: string
        default: none
    steps:
      - save_cache:
          key: << pipeline.parameters.cache-version >>-test-cache-<< parameters.oe-version >>-{{ checksum "package.json" }}
          paths: [ cache ]

jobs:
  package:
    docker:
      - image: cimg/node:20.8
    environment:
      npm_config_cache: /home/circleci/cache/node_modules_cache
      EXPECTED_VSIX_COUNT: << pipeline.parameters.expected-vsix-count >>
    steps:
      - checkout
      - restore-package-cache
      - run: .circleci/package.sh
      - run: rm -r node_modules
      - persist_to_workspace: { root: ., paths: [ . ] }
      - save-package-cache
      - run: '[ "$(find . -type f -name "*.vsix" | tee /dev/tty | wc -l)" = "1" ] && echo "pass" || (echo "error - count does not match (expected=$EXPECTED_VSIX_COUNT)" && exit 1)'
  test:
    <<: *oe-version-param
    docker:
      - image: kherring/ablunit-test-runner:<< parameters.oe-version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    environment:
      ABLUNIT_TEST_RUNNER_OE_VERSION: << parameters.oe-version >>
      ABLUNIT_TEST_RUNNER_VSCODE_VERSION: << parameters.vscode-version >>
      EXPECTED_VSIX_COUNT: << pipeline.parameters.expected-vsix-count >>
    steps:
      - attach_workspace: { at: . }
      - restore-test-cache: { oe-version: << parameters.oe-version >> }
      - run: env
      - run: .circleci/run_test_wrapper.sh
      - persist_to_workspace: { root: ".", paths: [ artifacts, coverage ]}
      - run: find . -type f -name "mocha_results_sonar_*.xml" -delete
      - store_test_results: { path: artifacts }
      - store_artifacts: { when: always, path: artifacts }
      # - save-test-cache: { oe-version: << parameters.oe-version >> }
  install-and-run:
    <<: *oe-version-param
    executor: psc-primary
    environment:
      ABLUNIT_TEST_RUNNER_OE_VERSION: << parameters.oe-version >>
      ABLUNIT_TEST_RUNNER_VSCODE_VERSION: << parameters.vscode-version >>
    steps:
      - attach_workspace: { at: . }
      - restore-test-cache: { oe-version: << parameters.oe-version >> }
      - run: .circleci/install_and_run.sh
      - store_test_results: { path: dummy-ext/artifacts }
      - store_artifacts: { when: always, path: dummy-ext/artifacts }
  sonar:
    executor: psc-primary
    steps:
      - attach_workspace: { at: . }
      - run: cat artifacts/stable-12.8.1/mocha_results_sonar_proj1.xml || true #TODO remove me
      - run: rm artifacts/stable-12.8.1/mocha_results_junit_*.xml || true
      - sonarcloud/scan:
          cache_version: 9
  publish:
    docker:
      - image: cimg/node:20.8
    steps:
      - attach_workspace: { at: . }
      - run: .circleci/publish.sh
      - store_artifacts: { when: always, path: artifacts }

workflows:
  build:
    jobs:
      - shellcheck/check
      - package:
          <<: *context-and-filters
      - test:
          <<: *context-and-filters
          requires: [ package ]
          oe-version: << pipeline.parameters.primary-oe-version >>
          matrix:
            parameters:
              vscode-version: [ stable ]
              # vscode-version: [ stable, insiders ]
          name: test-<< pipeline.parameters.primary-oe-version >>-<< matrix.vscode-version >>
      - test:
          <<: *context-and-filters
          requires: [ package, test-12.8.1-stable ]
          matrix:
            parameters:
              oe-version: [ 12.2.12, 12.8.3 ]
              vscode-version: [ stable ]
              # vscode-version: [ stable, insiders ]
          name: test-<< matrix.oe-version>>-<< matrix.vscode-version >>
      - sonar:
          <<: *context-and-filters
          requires: [ test-<< pipeline.parameters.primary-oe-version >>-stable ]
      # - install-and-run:
      #     <<: *context-and-filters
      #     requires: [ test-12.8.1-stable ]
      - publish:
          context:
            - Azure_PAT
            - GitHub_CLI
          filters: ## ignore branches; build only tags
            branches: { ignore: /^.*$/ }
            tags: { only: /^.*$/ }
          requires:
            - shellcheck/check
            - sonar
            # - install-and-run
