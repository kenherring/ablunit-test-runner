import { TestRunProfileKind, TestRunRequest, Uri, workspace, WorkspaceFolder } from 'vscode'
import { log } from './ChannelLogger'
import { PropathParser } from './ABLPropath'
import { platform } from 'os'
import { getProfileConfig, RunConfig } from './parse/TestProfileParser'
import { CoreOptions, IABLUnitJson, ITestObj } from './parse/config/CoreOptions'
import { ProfilerOptions } from './parse/config/ProfilerOptions'
import { getOpenEdgeProfileConfig, IBuildPathEntry, IDatabaseConnection, IDlc, ProfileConfig } from './parse/OpenedgeProjectParser'
import { dirname } from 'path'
import * as FileUtils from './FileUtils'

export const ablunitConfig = new WeakMap<WorkspaceFolder, RunConfig>()

export class ABLUnitConfig  {

	// ablunitConfig: IABLUnitConfig = <IABLUnitConfig>{}
	ablunitConfig: RunConfig = {} as RunConfig
	requestKind: TestRunProfileKind | undefined

	setup (workspaceFolder: WorkspaceFolder, request: TestRunRequest) {
		log.info('[ABLUnitConfigWriter setup] workspaceUri="' + workspaceFolder.uri.fsPath + '"')
		this.ablunitConfig = getProfileConfig(workspaceFolder)
		log.info('[ABLUnitConfigWriter constructor] setup complete! tempDir=' + this.ablunitConfig.tempDirUri.fsPath)
		this.requestKind = request.profile?.kind
	}

	async writeFile (uri: Uri, data: Uint8Array) {
		FileUtils.createDir(dirname(uri.fsPath))
		return workspace.fs.writeFile(uri, data)
	}

	createProgressIni (propath: string, dlc: IDlc) {
		if (platform() != 'win32') { return }
		if (!this.ablunitConfig.progressIniUri) { return }
		log.info('creating progress.ini: \'' + this.ablunitConfig.progressIniUri.fsPath + '\'')

		// TODO - only write if the existing file
		// * has the generated by comment
		// * is in the extension temp dir

		const iniData = [
			'## Generated by ablunit-test-runner vscode extension',
			'[WinChar Startup]',
			'PROPATH=' + propath.replace(/\$\{DLC\}/g, dlc.uri.fsPath.replace(/\\/g, '/'))
		]
		const iniBytes = Uint8Array.from(Buffer.from(iniData.join('\n')))
		return workspace.fs.writeFile(this.ablunitConfig.progressIniUri, iniBytes)
	}

	createAblunitJson (_uri: Uri, cfg: CoreOptions, testQueue: ITestObj[]) {
		if (!this.ablunitConfig.config_uri) {
			throw new Error('Output location not defined!')
		}
		log.info('creating ablunit.json: \'' + this.ablunitConfig.config_uri.fsPath + '\'')
		const promarr: PromiseLike<void>[] = []
		FileUtils.createDir(this.ablunitConfig.optionsUri.locationUri)
		FileUtils.deleteFile(this.ablunitConfig.optionsUri.filenameUri)
		FileUtils.deleteFile(this.ablunitConfig.optionsUri.jsonUri)

		const out: IABLUnitJson = {
			$comment: 'Generated by ablunit-test-runner vscode extension',
			options: cfg,
			tests: testQueue
		}

		promarr.push(workspace.fs.writeFile(this.ablunitConfig.config_uri, Uint8Array.from(Buffer.from(JSON.stringify(out, null, 4)))))
		return Promise.all(promarr)
	}

	createProfileOptions (uri: Uri, profOpts: ProfilerOptions) {
		if (!profOpts.enabled) {
			return Promise.resolve()
		}
		log.info('creating profiler options file: \'' + uri.fsPath + '\'')

		FileUtils.deleteFile(this.ablunitConfig.profFilenameUri)
		if (this.requestKind != TestRunProfileKind.Coverage) {
			return Promise.resolve()
		}

		const opt: string[] = [
			'## Generated by ablunit-test-runner vscode extension',
			'-profiling',
			'-filename "' + profOpts.filename + '"',
			'-description "' + profOpts.description + '"'
		]

		if (profOpts.coverage) {
			opt.push('-coverage')
		}

		if (this.ablunitConfig.profListingsUri) {
			opt.push('-listings "' + profOpts.listings + '"')
			FileUtils.createDir(this.ablunitConfig.profListingsUri)
		}
		if (profOpts.statistics) {
			opt.push('-statistics')
		}
		if (profOpts.tracing) {
			opt.push('-tracing "' + profOpts.tracing + '"')
		}
		if (profOpts.traceFilter != '') {
			opt.push('-traceFilter "' + profOpts.traceFilter + '"')
		}
		return this.writeFile(uri, Uint8Array.from(Buffer.from(opt.join('\n') + '\n')))
	}

	createDbConnPf (uri: Uri, dbConns: IDatabaseConnection[]) {
		if (!dbConns || dbConns.length == 0) {
			return
		}
		log.info('creating dbconn.pf: \'' + this.ablunitConfig.dbConnPfUri.fsPath + '\'')

		const lines: string[] = []
		lines.push('## Generated by ablunit-test-runner vscode extension')
		for (const conn of dbConns) {
			lines.push(conn.connect)
		}
		if (lines.length > 0) {
			return this.writeFile(uri, Uint8Array.from(Buffer.from(lines.join('\n') + '\n')))
		}
		throw new Error('unexpected error writing dbconns to ' + uri.fsPath)
	}

	readPropathFromJson (extensionResourcesDir?: Uri) {
		log.info('reading propath from openedge-project.json (workspaceFolder=' + this.ablunitConfig.workspaceFolder.uri.fsPath + ')')
		const parser: PropathParser = new PropathParser(this.ablunitConfig.workspaceFolder)

		let conf: ProfileConfig | undefined = undefined
		if (this.ablunitConfig.importOpenedgeProjectJson) {
			conf = getOpenEdgeProfileConfig(this.ablunitConfig.workspaceFolder.uri, this.ablunitConfig.openedgeProjectProfile)
		}
		const pathObj: IBuildPathEntry[] = []
		if (extensionResourcesDir) {
			pathObj.push({
				path: Uri.joinPath(extensionResourcesDir, 'VSCodeTestRunner').fsPath,
				type: 'propath',
				buildDir: Uri.joinPath(extensionResourcesDir, 'VSCodeTestRunner').fsPath,
				xrefDir: Uri.joinPath(extensionResourcesDir, 'VSCodeTestRunner').fsPath,
			})
		}
		if (conf && conf.buildPath.length > 0) {
			log.info('extensionResourcesDir=' + extensionResourcesDir?.fsPath)
			for (const e of conf.buildPath) {
				pathObj.push({
					path: e.path,
					type: e.type.toLowerCase(),
					buildDir: e.buildDir,
					xrefDir: e.xrefDir
				})
			}
		} else {
			pathObj.push({
				path: '.',
				type: 'source',
				buildDir: '.',
				xrefDir: '.'
			})
		}
		parser.setPropath({ propathEntry: pathObj })

		log.info('using propath=\'' + parser.toString() + '\'')
		return parser
	}
}
