{
	"name": "ablunit-test-provider",
	"displayName": "ABLUnit Test Runner",
	"description": "OpenEdge ABLUnit support for VSCode",
	"version": "0.1.4",
	"publisher": "kherring",
	"pricing": "Free",
	"private": true,
	"license": "MIT",
	"icon": "images/icon_128.png",
	"author": "Ken Herring",
	"qna": "false",
	"repository": "https://github.com/kenherring/ablunit-test-provider",
	"bugs": {
		"url": "https://github.com/kenherring/ablunit-test-provider/issues"
	},
	"licenses": [
		{
			"type": "MIT",
			"url": "https://github.com/kenherring/ablunit-test-provider/blob/main/LICENSE.md"
		}
	],
	"badges": [
		{
			"href": "https://dl.circleci.com/status-badge/redirect/gh/kenherring/ablunit-test-provider/tree/main",
			"url": "https://img.shields.io/circleci/build/github/kenherring/ablunit-test-provider/main?logo=circleci",
			"description": "CircleCI Build Status"
		},
		{
			"href": "https://sonarcloud.io/summary/new_code?id=kenherring_ablunit-test-provider",
			"url": "https://sonarcloud.io/api/project_badges/measure?project=kenherring_ablunit-test-provider&metric=sqale_rating",
			"description": "SonarCloud Maintainability Rating"
		}
	],
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": false
		}
	},
	"keywords": [
		"progress",
		"progress software",
		"openege",
		"abl",
		"ablunit",
		"progress software",
		"pdsoe"
	],
	"engines": {
		"vscode": "^1.83.0"
	},
	"categories": [
		"Testing"
	],
	"activationEvents-coverage": [
		"onStartupFinished"
	],
	"activationEvents": [
		"onStartupFinished",
		"workspaceContains:{**/*.cls,**/*.p}"
	],
	"main": "./out/extension",
	"scripts": {
		"esbuild-base": "rm -rf out && esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
		"build": "npm run esbuild",
		"clean": "rm -rf coverage out && sh -c ./cleanup.sh",
		"clean-and-compile": "npm run clean && npm run compile",
		"compile": "tsc -p ./",
		"esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
		"esbuild": "npm run esbuild-base -- --sourcemap",
		"postinstall": "echo node ./node_modules/vscode/bin/install",
		"pretest": "npm run compile",
		"test-compile": "tsc -p ./",
		"test": "node ./out/test/runTest.js",
		"test:coverage-activation-before": "sed -i 's/\"activationEvents\"/\"activationEvents-vscode\"/g;s/\"activationEvents-coverage\"/\"activationEvents\"/g' package.json",
		"vscode-test": "vscode-test",
		"test:coverage-activation-after": "sed -i 's/\"activationEvents\"/\"activationEvents-coverage\"/g;s/\"activationEvents-vscode\"/\"activationEvents\"/g' package.json",
		"vscode:prepublish": "npm run esbuild-base -- --minify",
		"watch-tsc": "tsc -watch -p ./",
		"watch": "npm run esbuild-watch"
	},
	"dependencies": {
		"jsonminify": "^0.4.2",
		"xml2js": "^0.6.2"
	},
	"devDependencies": {
		"@types/glob": "^8.1.0",
		"@types/jsonminify": "^0.4.1",
		"@types/node": "^16.18.34",
		"@types/vscode": "^1.83.0",
		"@types/xml2js": "^0.4.12",
		"@typescript-eslint/eslint-plugin": "^6.7.0",
		"@typescript-eslint/parser": "^6.7.0",
		"@vscode/test-cli": "^0.0.4",
		"@vscode/test-electron": "^2.3.6",
		"esbuild": "^0.19.5",
		"eslint": "^8.26.0",
		"mocha": "^10.2.0",
		"mocha-junit-reporter": "^2.2.1",
		"mocha-multi-reporters": "^1.5.1",
		"nyc": "^15.1.0",
		"ts-node": "^10.9.1"
	},
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "ABLUnit Test Provider",
			"properties": {
				"ablunit.display.classLabel": {
					"type": "string",
					"default": "classname",
					"enum": [
						"classname",
						"filepath"
					],
					"markdownDescription": "* classpath example: `com.example.myclass`\n* filepath example: `src/com/example/myclass.cls`"
				},
				"ablunit.files.include": {
					"type": "array",
					"default": [
						"**/*.{cls,p}"
					],
					"description": "Glob patterns to include test files"
				},
				"ablunit.files.exclude": {
					"type": "array",
					"default": [
						"**/.builder/**"
					],
					"description": "Glob patterns to exclude test files"
				},
				"ablunit.findAllFilesAtStartup": {
					"type": "boolean",
					"default": true,
					"description": "For large workspaces this may improve performance by loading tests as they are found instead of doing so when the extension is activated"
				},
				"ablunit.importOpenedgeProjectJson": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Import configuration settings from `openedge-project.json` when possible"
				},
				"ablunit.notificationsEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Show notifications when tests are run"
				},
				"ablunit.params": {
					"type": "string",
					"default": "",
					"markdownDescription": "Additional parameters to pass to the ABLUnit command line\n\n**Example**: `-pf dbconns.pf`"
				},
				"ablunit.progressIniPath": {
					"type": "string",
					"default": "progress.ini",
					"scope": "window",
					"markdownDescription": "Location of the `progress.ini` file (relative or absolute).  When blank the extension will look for a `progress.ini` file in the repo root before creating one at ${config:ablunit.tempDir}"
				},
				"ablunit.tempDir": {
					"type": "string",
					"default": "",
					"markdownDescription": "Location of the temporary directory used to store the `results.xml` file\n\n## Examples\n\n* `temp`\n* `${workspaceFolder}`\n* `C:\\temp`"
				},
				"ablunit.tests.command": {
					"type": "string",
					"default": "",
					"description": "Custom command line executed to run a test"
				},
				"ablunit.tests.command.useABLPluginCommand": {
					"type": "string",
					"default": "",
					"markdownDescription": "Use a command from the VSCode [OpenEdge ABL](https://marketplace.visualstudio.com/items?itemName=RiversideSoftware.openedge-abl-lsp) plugin to run a test",
					"TODO": true
				},
				"ablunit.tests.task": {
					"type": "string",
					"default": "TODO",
					"description": "Run tests using the specified task"
				},
				"ablunit.configJson.configPath": {
					"type": "string",
					"default": "ablunit.json",
					"markdownDescription": "Location of ablunit json configutation passed to the command line with `-param= \"CFG=ablunit.json\"`"
				},
				"ablunit.configJson.outputLocation": {
					"type": "string",
					"default": "",
					"markdownDescription": "Location of the outputted results.xml file.  Default = `ablunit.tempDir`\n\nDirectory only, filename will always be `results.xml`\n\nPath can be absolute or relative to the workspace root.\n\n"
				},
				"ablunit.configJson.outputWriteJson": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Write the results to `results.json`.  Location is the same directory as `results.xml`"
				},
				"ablunit.configJson.quitOnEnd": {
					"type": "boolean",
					"default": true,
					"description": "Quit the session when the test run is complete"
				},
				"ablunit.configJson.writeLog": {
					"type": "boolean",
					"default": true,
					"description": "Start the session with logging enabled"
				},
				"ablunit.configJson.showErrorMessage": {
					"type": "boolean",
					"default": true,
					"description": "TODO"
				},
				"ablunit.configJson.throwError": {
					"type": "boolean",
					"default": true,
					"description": "TODO"
				},
				"ablunit.profilerOptions.optionsPath": {
					"type": "string",
					"default": "profile.options",
					"markdownDescription": "Location of the outputted profile.options file\n\nsee [`-profile`](https://docs.progress.com/bundle/openedge-startup-and-parameter-reference-122/page/Profiler-profile.html)"
				},
				"ablunit.profilerOptions.enabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable the profiler\n\nsee the [`PROFILER:PROFILING`](https://docs.progress.com/bundle/abl-reference/page/PROFILING-attribute.html) attribute"
				},
				"ablunit.profilerOptions.description": {
					"type": "string",
					"default": "Unit Tests Run via ABLUnit Test Runner (VSCode)",
					"markdownDescription": "Description of the profiler run\n\nsee the [`PROFILER:DESCRIPTION`](https://docs.progress.com/bundle/abl-reference/page/DESCRIPTION-attribute.html) attribute"
				},
				"ablunit.profilerOptions.filename": {
					"type": "string",
					"default": "prof.out",
					"markdownDescription": "Location of the profiler results (`-outfile <outfile>`)\n\nsee the [`PROFILER:FILE-NAME`](https://docs.progress.com/bundle/abl-reference/page/DIRECTORY-attribute.html) attribute"
				},
				"ablunit.profilerOptions.listings": {
					"type": "string",
					"default": "listings",
					"markdownDescription": "Flag to output debug listings (`-listings`)\n\nsee the [`PROFILER:LISTINGS`](https://docs.progress.com/bundle/abl-reference/page/LISTINGS-attribute.html) attribute"
				},
				"ablunit.profilerOptions.statistics": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Flag to output statistics (-statistics)\n\nsee the [`PROFILER:STATISTICS`](https://docs.progress.com/bundle/abl-reference/page/STATISTICS-attribute.html) attribute"
				},
				"ablunit.profilerOptions.traceFilter": {
					"type": "string",
					"default": "",
					"markdownDescription": "Comma-separated string that uses wildcard matching for any procedure or class you want trace (`-trace-filter <string>`)\n\nsee the [`PROFILER:TRACE-FILTER`](https://docs.progress.com/bundle/abl-reference/page/TRACE-FILTER-attribute.html) attribute"
				},
				"ablunit.profilerOptions.tracing": {
					"type": "string",
					"default": "",
					"markdownDescription": "Comma-separated string of procedure and line number pairs. A pipe (|) separates the procedure name and line number.\n\n**Example**: \"test1|32,test2|17\" (`-tracing <string>`)\n\nsee the [`PROFILER:TRACING`](https://docs.progress.com/bundle/abl-reference/page/TRACING-attribute.html) attribute"
				},
				"ablunit.profilerOptions.writeJson": {
					"type": "boolean",
					"default": "false",
					"markdownDescription": "Output the results in JSON format after parsing.  Writes to a file by the same name as the `filename` option, but with a `.json` extension (default: `prof.json`)"
				}
			}
		},
		"languages": [
			{
				"id": "abl-procedure",
				"extensions": [
					".p"
				]
			},
			{
				"id": "abl-class",
				"extensions": [
					".cls"
				]
			}
		],
		"snippets": [
			{
				"language": "abl-procedure",
				"path": "./snippets-procedures.json"
			},
			{
				"language": "abl-class",
				"path": "./snippets-classes.json"
			}
		]
	}
}
